{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Web3","require","givenProvider","App","useAxios","data","loading","error","update","result","JSON","stringify","tokens","filter","name","tokenInfo","map","item","fromExponential","balance","toString","replace","symbol","split","length","className","ETH","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"mtBAOMA,EAAOC,EAAQ,KACV,IAAID,EAAKA,EAAKE,eAAiB,uBAwD3BC,MAlDf,WAAe,MAG8BC,YACzC,oHAJW,0BAGJC,EAHI,EAGJA,KAAMC,EAHF,EAGEA,QAASC,EAHX,EAGWA,MAASC,EAHpB,KAOb,GAAIF,EAAS,OAAO,yCACpB,GAAIC,EAAO,OAAO,qCAElB,IAaIE,EAbUC,KAAKC,UAGhBN,EAAKO,OAAOC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,UAAUD,QAAME,KAC/C,SAACC,GAAD,OAECA,EAAKF,UAAUD,KAAO,KACtBI,YAAiCD,EAAKE,QApBlCC,WAAWC,QAAQ,wBAAyB,MAoBE,IAAMJ,EAAKF,UAAUO,UAEvE,KAAM,GAGGC,MAAM,KACHV,QAAO,SAAAC,GAAI,OAAIA,EAAKU,OAAS,MAAIR,KAAI,SAAAC,GAAI,OAAI,4BAAKA,MAGnE,OACE,yBAAKQ,UAAY,WAEf,6BACE,8BACG,IADH,oBAEoBf,KAAKC,UAAUN,EAAKqB,IAAIP,QAAS,KAAM,GAF3D,SAOF,yBAAKM,UAAY,WAGjB,gCAAMhB,EAAN,KACA,6BACE,4BAAQgB,UAAY,MAAME,QAASnB,GAAnC,mBC5CYoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.559845e8.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\nimport axios from 'axios';\nimport useAxios from 'axios-hooks';\nimport fromExponential from 'from-exponential';\n\nconst Web3 = require('web3');\nlet web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction App() {\n  //fetch data through GET request using axious hooks https://www.npmjs.com/package/axios-hooks and API called ethplorer.io, note \n\n  const [{ data, loading, error }, update] = useAxios(\n    \"https://api.ethplorer.io/getAddressInfo/0xa145ac099e3d2e9781c9c848249e2e6b256b030d?apiKey=EK-c9PaC-goN3Cyq-1CqdU\"\n  );\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error!</p>;\n\n  let outcome = JSON.stringify(\n\n  //iterate through items of data.tokens array\n    (data.tokens.filter(name => name.tokenInfo.name).map(\n      (item) => \n      \n       item.tokenInfo.name + ': ' +\n       fromExponential(numberWithCommas(item.balance)) + ' ' + item.tokenInfo.symbol)\n     \n    ), null, 2);\n\n  let arr = [];\n  arr = outcome.split('\"')\n  let result = arr.filter(name => name.length > 10).map(item => <li>{item}</li>)\n\n\n  return (\n    <div className = 'section'>\n      \n      <div>\n        <span>\n          {\" \"}\n          Account balance: {JSON.stringify(data.ETH.balance, null, 2)} ETH\n        </span>\n      </div>\n     \n     \n      <div className = 'section'>\n        \n       \n      <tl> {result} </tl>\n      <div>\n        <button className = 'btn' onClick={update}>Update data</button>\n      </div> \n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}